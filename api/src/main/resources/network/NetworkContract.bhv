import fr.overrride.game.shooter.session.character.ShooterCharacter
import fr.overrride.game.shooter.session.weapons.SimpleWeapon
import fr.overrride.game.shooter.api.other.animations.Animable
import fr.overrride.game.shooter.session.GameSessionImpl
import fr.overrride.game.shooter.api.session.comps.RectangleComponent
import fr.overrride.game.shooter.api.session.character.LivingEntity
import fr.overrride.game.shooter.api.session.character.Character
import fr.overrride.game.shooter.api.session.GameSessionObject
import fr.overrride.game.shooter.api.session.weapon.Weapon

agreement broadcast_if_owner = {
    if (current is owner) {accept *}
}

agreement broadcast_if_root_owner = {
    if (current is root_owner) {accept *}
}

agreement broadcast = {
    accept *
}

describe ShooterCharacter {
    sync weapon
    sync controller
    sync dash

    setWeapon(sync Weapon)
}

describe SimpleWeapon {
    sync owner
}

describe Animable {
    setLocation(float, float) as broadcast_if_owner
    setRotation(float) as broadcast_if_owner
    setSize(float, float) as broadcast_if_owner
}

describe GameSessionImpl {
    sync particleManager

    addCharacter(sync Character)
    addObject(GameSessionObject) as broadcast_if_owner
    removeObject(GameSessionObject) as broadcast_if_root_owner
}

describe RectangleComponent {
    sync position
}

describe LivingEntity {
    foreach method enable as broadcast_if_owner
    getHealth
    getMaxHealth
}

describe Character {
    enable dash as broadcast_if_owner
}
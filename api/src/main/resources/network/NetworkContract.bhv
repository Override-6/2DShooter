import fr.overrride.game.shooter.session.character.ShooterCharacter
import fr.overrride.game.shooter.session.weapons.SimpleWeapon
import fr.overrride.game.shooter.api.other.animations.Animable
import fr.overrride.game.shooter.session.GameSessionImpl
import fr.overrride.game.shooter.api.session.comps.RectangleComponent
import fr.overrride.game.shooter.api.session.character.LivingEntity
import fr.overrride.game.shooter.api.session.character.Character
import fr.overrride.game.shooter.api.session.GameSessionObject
import fr.overrride.game.shooter.api.session.ParticleManager
import fr.overrride.game.shooter.api.session.weapon.Weapon
import fr.overrride.game.shooter.session.character.CharacterController
import fr.overrride.game.shooter.api.session.GameSession
import fr.overrride.game.shooter.api.other.GraphicComponent
import com.badlogic.gdx.math.Vector2

agreement broadcast_if_owner = if (current is owner) {accept *}
agreement broadcast_if_root_owner = if (current is root_owner) {accept *}
agreement broadcast = accept *
agreement only_owner = discard * -> accept owner

describe ShooterCharacter {
    sync weapon
    sync controller
    sync dash
    sync position

    setWeapon(sync Weapon)
}

describe ParticleManager {
    [procrastinator = @lwjgl]
    foreach method enable as broadcast
}

describe SimpleWeapon {
    sync owner
}

describe Animable {
    setLocation(float, float) as broadcast_if_owner
    setRotation(float) as broadcast_if_owner
    setSize(float, float) as broadcast_if_owner
}

describe mirroring Vector2 {
    foreach method enable as broadcast_if_owner
    set(float, float) as broadcast_if_owner
    set(Vector2) as broadcast_if_owner
}

describe CharacterController {
    sync character
}

describe GameSessionImpl {
    sync particleManager
}

describe GraphicComponent {
    foreach method disable
}

describe GameSession {
    addCharacter(sync Character) as broadcast
    addObject(GameSessionObject) as broadcast
    removeObject(GameSessionObject) as broadcast_if_root_owner
}

describe LivingEntity {
    foreach method enable as broadcast_if_owner
    enable getHealth
    enable getMaxHealth
}

describe Character {
    enable dash as broadcast_if_owner
}